#!/bin/bash\n\n# JobView数据库优化测试套件执行脚本\n# 作者: 测试工程师\n# 日期: 2025-09-07\n# 版本: v1.0\n\nset -e  # 遇到错误立即退出\n\n# 颜色定义\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\n# 配置\nTEST_DB_HOST=${TEST_DB_HOST:-\"localhost\"}\nTEST_DB_PORT=${TEST_DB_PORT:-\"5432\"}\nTEST_DB_USER=${TEST_DB_USER:-\"test_user\"}\nTEST_DB_PASSWORD=${TEST_DB_PASSWORD:-\"test_pass\"}\nTEST_DB_NAME=${TEST_DB_NAME:-\"jobview_test\"}\nTEST_RESULTS_DIR=\"./test_results\"\nTIMESTAMP=$(date +\"%Y%m%d_%H%M%S\")\nRESULT_PREFIX=\"jobview_test_${TIMESTAMP}\"\n\n# 创建结果目录\nmkdir -p \"${TEST_RESULTS_DIR}\"\n\n# 日志函数\nlog() {\n    echo -e \"${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}\"\n}\n\nwarn() {\n    echo -e \"${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}\"\n}\n\nerror() {\n    echo -e \"${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}\"\n}\n\ninfo() {\n    echo -e \"${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] INFO: $1${NC}\"\n}\n\n# 检查先决条件\ncheck_prerequisites() {\n    log \"检查测试先决条件...\"\n    \n    # 检查Go环境\n    if ! command -v go &> /dev/null; then\n        error \"Go未安装或不在PATH中\"\n        exit 1\n    fi\n    \n    go_version=$(go version | awk '{print $3}' | sed 's/go//')\n    log \"Go版本: ${go_version}\"\n    \n    # 检查PostgreSQL连接\n    if command -v psql &> /dev/null; then\n        info \"检查数据库连接...\"\n        if PGPASSWORD=\"${TEST_DB_PASSWORD}\" psql -h \"${TEST_DB_HOST}\" -p \"${TEST_DB_PORT}\" -U \"${TEST_DB_USER}\" -d \"${TEST_DB_NAME}\" -c \"SELECT 1;\" &> /dev/null; then\n            log \"数据库连接成功\"\n        else\n            warn \"数据库连接失败，某些测试可能跳过\"\n        fi\n    else\n        warn \"psql未安装，跳过数据库连接检查\"\n    fi\n    \n    # 检查必要的Go模块\n    if [ ! -f \"go.mod\" ]; then\n        error \"未找到go.mod文件，请在项目根目录运行此脚本\"\n        exit 1\n    fi\n    \n    log \"先决条件检查完成\"\n}\n\n# 设置测试环境变量\nsetup_test_environment() {\n    log \"设置测试环境变量...\"\n    \n    export DB_HOST=\"${TEST_DB_HOST}\"\n    export DB_PORT=\"${TEST_DB_PORT}\"\n    export DB_USER=\"${TEST_DB_USER}\"\n    export DB_PASSWORD=\"${TEST_DB_PASSWORD}\"\n    export DB_NAME=\"${TEST_DB_NAME}\"\n    export ENVIRONMENT=\"test\"\n    \n    # 设置Go测试环境\n    export GOCACHE=\"$(go env GOCACHE)\"\n    export GOFLAGS=\"-buildvcs=false\"\n    \n    log \"测试环境变量设置完成\"\n}\n\n# 运行单元测试\nrun_unit_tests() {\n    log \"开始运行单元测试...\"\n    \n    local unit_test_result=\"${TEST_RESULTS_DIR}/${RESULT_PREFIX}_unit_tests.txt\"\n    local unit_test_json=\"${TEST_RESULTS_DIR}/${RESULT_PREFIX}_unit_tests.json\"\n    \n    info \"执行单元测试，结果保存到: ${unit_test_result}\"\n    \n    # 运行单元测试并保存结果\n    if go test -v -race -count=1 -timeout=10m \\\n        -coverprofile=\"${TEST_RESULTS_DIR}/${RESULT_PREFIX}_coverage.out\" \\\n        -json \\\n        ./tests/service/job_application_unit_test.go \\\n        ./internal/service/job_application_service.go 2>&1 | \\\n        tee \"${unit_test_result}\" | \\\n        grep -E '^{.*}$' > \"${unit_test_json}\"; then\n        log \"单元测试执行完成\"\n    else\n        warn \"单元测试执行完成，但可能有失败的测试\"\n    fi\n    \n    # 生成覆盖率报告\n    if [ -f \"${TEST_RESULTS_DIR}/${RESULT_PREFIX}_coverage.out\" ]; then\n        go tool cover -html=\"${TEST_RESULTS_DIR}/${RESULT_PREFIX}_coverage.out\" \\\n            -o=\"${TEST_RESULTS_DIR}/${RESULT_PREFIX}_coverage.html\"\n        go tool cover -func=\"${TEST_RESULTS_DIR}/${RESULT_PREFIX}_coverage.out\" \\\n            > \"${TEST_RESULTS_DIR}/${RESULT_PREFIX}_coverage_summary.txt\"\n        log \"代码覆盖率报告生成完成\"\n    fi\n}\n\n# 运行集成测试\nrun_integration_tests() {\n    log \"开始运行集成测试...\"\n    \n    local integration_test_result=\"${TEST_RESULTS_DIR}/${RESULT_PREFIX}_integration_tests.txt\"\n    \n    info \"执行集成测试，结果保存到: ${integration_test_result}\"\n    \n    if go test -v -race -count=1 -timeout=15m \\\n        ./tests/database/integration_test.go 2>&1 | \\\n        tee \"${integration_test_result}\"; then\n        log \"集成测试执行完成\"\n    else\n        warn \"集成测试执行完成，但可能有失败的测试\"\n    fi\n}\n\n# 运行性能基准测试\nrun_benchmark_tests() {\n    log \"开始运行性能基准测试...\"\n    \n    local benchmark_result=\"${TEST_RESULTS_DIR}/${RESULT_PREFIX}_benchmarks.txt\"\n    local benchmark_mem=\"${TEST_RESULTS_DIR}/${RESULT_PREFIX}_benchmarks_mem.txt\"\n    \n    info \"执行性能基准测试，结果保存到: ${benchmark_result}\"\n    \n    # 运行基准测试\n    if go test -v -bench=. -benchmem -count=3 -timeout=30m \\\n        -cpuprofile=\"${TEST_RESULTS_DIR}/${RESULT_PREFIX}_cpu.prof\" \\\n        -memprofile=\"${TEST_RESULTS_DIR}/${RESULT_PREFIX}_mem.prof\" \\\n        ./tests/service/job_application_performance_test.go 2>&1 | \\\n        tee \"${benchmark_result}\"; then\n        log \"性能基准测试执行完成\"\n    else\n        warn \"性能基准测试执行完成，但可能有问题\"\n    fi\n    \n    # 生成性能分析报告\n    if [ -f \"${TEST_RESULTS_DIR}/${RESULT_PREFIX}_cpu.prof\" ]; then\n        go tool pprof -text \"${TEST_RESULTS_DIR}/${RESULT_PREFIX}_cpu.prof\" \\\n            > \"${TEST_RESULTS_DIR}/${RESULT_PREFIX}_cpu_analysis.txt\" 2>/dev/null || true\n    fi\n    \n    if [ -f \"${TEST_RESULTS_DIR}/${RESULT_PREFIX}_mem.prof\" ]; then\n        go tool pprof -text \"${TEST_RESULTS_DIR}/${RESULT_PREFIX}_mem.prof\" \\\n            > \"${TEST_RESULTS_DIR}/${RESULT_PREFIX}_mem_analysis.txt\" 2>/dev/null || true\n    fi\n}\n\n# 运行负载测试\nrun_load_tests() {\n    log \"开始运行负载测试...\"\n    \n    local load_test_result=\"${TEST_RESULTS_DIR}/${RESULT_PREFIX}_load_tests.txt\"\n    \n    info \"执行负载测试，结果保存到: ${load_test_result}\"\n    \n    # 负载测试通常运行时间较长，设置较长的超时时间\n    if go test -v -timeout=45m \\\n        -run=\"TestLoadTesting\" \\\n        ./tests/service/job_application_load_test.go 2>&1 | \\\n        tee \"${load_test_result}\"; then\n        log \"负载测试执行完成\"\n    else\n        warn \"负载测试执行完成，但可能有失败的测试\"\n    fi\n}\n\n# 运行回归测试\nrun_regression_tests() {\n    log \"开始运行回归测试...\"\n    \n    local regression_test_result=\"${TEST_RESULTS_DIR}/${RESULT_PREFIX}_regression_tests.txt\"\n    \n    info \"执行回归测试，结果保存到: ${regression_test_result}\"\n    \n    if go test -v -timeout=20m \\\n        ./tests/service/job_application_regression_test.go 2>&1 | \\\n        tee \"${regression_test_result}\"; then\n        log \"回归测试执行完成\"\n    else\n        warn \"回归测试执行完成，但可能有失败的测试\"\n    fi\n}\n\n# 收集系统指标\ncollect_system_metrics() {\n    log \"收集系统指标...\"\n    \n    local metrics_file=\"${TEST_RESULTS_DIR}/${RESULT_PREFIX}_system_metrics.txt\"\n    \n    {\n        echo \"=== 系统指标收集时间: $(date) ===\"\n        echo \"\"\n        echo \"=== CPU信息 ===\"\n        if command -v lscpu &> /dev/null; then\n            lscpu | grep -E \"CPU\\(s\\)|Model name|CPU MHz|Cache\"\n        elif command -v sysctl &> /dev/null; then\n            sysctl -n machdep.cpu.brand_string 2>/dev/null || echo \"CPU信息获取失败\"\n            sysctl -n hw.ncpu 2>/dev/null && echo \"逻辑CPU核数\" || true\n        fi\n        echo \"\"\n        echo \"=== 内存信息 ===\"\n        if command -v free &> /dev/null; then\n            free -h\n        elif command -v sysctl &> /dev/null; then\n            echo \"物理内存: $(sysctl -n hw.memsize 2>/dev/null | awk '{print $1/1024/1024/1024 \" GB\"}' 2>/dev/null || echo '未知')\"\n        fi\n        echo \"\"\n        echo \"=== 磁盘信息 ===\"\n        df -h | head -10\n        echo \"\"\n        echo \"=== Go环境信息 ===\"\n        go env GOVERSION GOOS GOARCH GOMAXPROCS\n        echo \"\"\n        echo \"=== 运行时负载 ===\"\n        if command -v uptime &> /dev/null; then\n            uptime\n        fi\n        echo \"\"\n    } > \"${metrics_file}\"\n    \n    log \"系统指标收集完成: ${metrics_file}\"\n}\n\n# 生成测试报告\ngenerate_test_report() {\n    log \"生成测试报告...\"\n    \n    local report_file=\"${TEST_RESULTS_DIR}/${RESULT_PREFIX}_test_report.md\"\n    \n    {\n        echo \"# JobView 数据库优化测试报告\"\n        echo \"\"\n        echo \"**测试时间**: $(date)\"\n        echo \"**测试版本**: v1.0\"\n        echo \"**测试工程师**: 测试工程师\"\n        echo \"\"\n        echo \"## 测试环境\"\n        echo \"\"\n        echo \"- 数据库: PostgreSQL\"\n        echo \"- Go版本: $(go version | awk '{print $3}')\"\n        echo \"- 操作系统: $(uname -s)\"\n        echo \"- CPU架构: $(uname -m)\"\n        echo \"\"\n        echo \"## 测试套件执行状态\"\n        echo \"\"\n        \n        # 检查各个测试结果文件是否存在\n        local tests_run=0\n        local tests_passed=0\n        \n        if [ -f \"${TEST_RESULTS_DIR}/${RESULT_PREFIX}_unit_tests.txt\" ]; then\n            echo \"✅ 单元测试 - 已执行\"\n            tests_run=$((tests_run + 1))\n            if grep -q \"FAIL\" \"${TEST_RESULTS_DIR}/${RESULT_PREFIX}_unit_tests.txt\"; then\n                echo \"   ❌ 存在失败的测试\"\n            else\n                echo \"   ✅ 所有测试通过\"\n                tests_passed=$((tests_passed + 1))\n            fi\n        else\n            echo \"❌ 单元测试 - 未执行\"\n        fi\n        \n        if [ -f \"${TEST_RESULTS_DIR}/${RESULT_PREFIX}_integration_tests.txt\" ]; then\n            echo \"✅ 集成测试 - 已执行\"\n            tests_run=$((tests_run + 1))\n            if grep -q \"FAIL\" \"${TEST_RESULTS_DIR}/${RESULT_PREFIX}_integration_tests.txt\"; then\n                echo \"   ❌ 存在失败的测试\"\n            else\n                echo \"   ✅ 所有测试通过\"\n                tests_passed=$((tests_passed + 1))\n            fi\n        else\n            echo \"❌ 集成测试 - 未执行\"\n        fi\n        \n        if [ -f \"${TEST_RESULTS_DIR}/${RESULT_PREFIX}_benchmarks.txt\" ]; then\n            echo \"✅ 性能基准测试 - 已执行\"\n            tests_run=$((tests_run + 1))\n            tests_passed=$((tests_passed + 1))  # 基准测试通常不会失败\n        else\n            echo \"❌ 性能基准测试 - 未执行\"\n        fi\n        \n        if [ -f \"${TEST_RESULTS_DIR}/${RESULT_PREFIX}_load_tests.txt\" ]; then\n            echo \"✅ 负载测试 - 已执行\"\n            tests_run=$((tests_run + 1))\n            if grep -q \"FAIL\" \"${TEST_RESULTS_DIR}/${RESULT_PREFIX}_load_tests.txt\"; then\n                echo \"   ❌ 存在失败的测试\"\n            else\n                echo \"   ✅ 所有测试通过\"\n                tests_passed=$((tests_passed + 1))\n            fi\n        else\n            echo \"❌ 负载测试 - 未执行\"\n        fi\n        \n        if [ -f \"${TEST_RESULTS_DIR}/${RESULT_PREFIX}_regression_tests.txt\" ]; then\n            echo \"✅ 回归测试 - 已执行\"\n            tests_run=$((tests_run + 1))\n            if grep -q \"FAIL\" \"${TEST_RESULTS_DIR}/${RESULT_PREFIX}_regression_tests.txt\"; then\n                echo \"   ❌ 存在失败的测试\"\n            else\n                echo \"   ✅ 所有测试通过\"\n                tests_passed=$((tests_passed + 1))\n            fi\n        else\n            echo \"❌ 回归测试 - 未执行\"\n        fi\n        \n        echo \"\"\n        echo \"**测试套件通过率**: ${tests_passed}/${tests_run} ($(echo \"scale=1; ${tests_passed} * 100 / ${tests_run}\" | bc 2>/dev/null || echo \"N/A\")%)\"\n        echo \"\"\n        \n        # 代码覆盖率\n        if [ -f \"${TEST_RESULTS_DIR}/${RESULT_PREFIX}_coverage_summary.txt\" ]; then\n            echo \"## 代码覆盖率\"\n            echo \"\"\n            echo \"\\`\\`\\`\"\n            cat \"${TEST_RESULTS_DIR}/${RESULT_PREFIX}_coverage_summary.txt\" | head -20\n            echo \"\\`\\`\\`\"\n            echo \"\"\n        fi\n        \n        # 性能指标摘要\n        if [ -f \"${TEST_RESULTS_DIR}/${RESULT_PREFIX}_benchmarks.txt\" ]; then\n            echo \"## 性能指标摘要\"\n            echo \"\"\n            echo \"\\`\\`\\`\"\n            grep -E \"Benchmark.*-.*ns/op\" \"${TEST_RESULTS_DIR}/${RESULT_PREFIX}_benchmarks.txt\" | head -10\n            echo \"\\`\\`\\`\"\n            echo \"\"\n        fi\n        \n        echo \"## 测试文件清单\"\n        echo \"\"\n        find \"${TEST_RESULTS_DIR}\" -name \"${RESULT_PREFIX}_*\" -type f | while read -r file; do\n            echo \"- \\`$(basename \"$file\")\\` ($(du -h \"$file\" | cut -f1))\"\n        done\n        echo \"\"\n        echo \"## 建议和下一步\"\n        echo \"\"\n        echo \"基于测试结果，建议：\"\n        echo \"\"\n        echo \"1. 查看详细的测试日志文件了解具体的性能指标\"\n        echo \"2. 关注失败的测试用例并进行修复\"\n        echo \"3. 定期运行回归测试确保性能不会退化\"\n        echo \"4. 基于负载测试结果调整系统配置\"\n        echo \"\"\n        echo \"---\"\n        echo \"*报告生成时间: $(date)*\"\n        \n    } > \"${report_file}\"\n    \n    log \"测试报告生成完成: ${report_file}\"\n}\n\n# 清理函数\ncleanup() {\n    log \"清理测试环境...\"\n    # 清理临时文件（如果有的话）\n    # 恢复环境变量等\n    log \"清理完成\"\n}\n\n# 主函数\nmain() {\n    local start_time=$(date +%s)\n    \n    echo \"===========================================\"\n    echo \"    JobView 数据库优化测试套件\"\n    echo \"===========================================\"\n    echo \"\"\n    \n    info \"测试开始时间: $(date)\"\n    info \"测试结果将保存到: ${TEST_RESULTS_DIR}\"\n    \n    # 设置错误处理\n    trap cleanup EXIT\n    \n    # 执行测试流程\n    check_prerequisites\n    setup_test_environment\n    collect_system_metrics\n    \n    # 根据参数决定运行哪些测试\n    case \"${1:-all}\" in\n        \"unit\")\n            run_unit_tests\n            ;;\n        \"integration\")\n            run_integration_tests\n            ;;\n        \"benchmark\")\n            run_benchmark_tests\n            ;;\n        \"load\")\n            run_load_tests\n            ;;\n        \"regression\")\n            run_regression_tests\n            ;;\n        \"quick\")\n            run_unit_tests\n            run_benchmark_tests\n            ;;\n        \"all\"|*)\n            run_unit_tests\n            run_integration_tests\n            run_benchmark_tests\n            run_load_tests\n            run_regression_tests\n            ;;\n    esac\n    \n    # 生成报告\n    generate_test_report\n    \n    local end_time=$(date +%s)\n    local duration=$((end_time - start_time))\n    \n    log \"所有测试执行完成！\"\n    info \"总耗时: $((duration / 60))分$((duration % 60))秒\"\n    info \"测试报告: ${TEST_RESULTS_DIR}/${RESULT_PREFIX}_test_report.md\"\n    \n    # 显示关键结果摘要\n    echo \"\"\n    echo \"===========================================\"\n    echo \"            测试结果摘要\"\n    echo \"===========================================\"\n    if [ -f \"${TEST_RESULTS_DIR}/${RESULT_PREFIX}_test_report.md\" ]; then\n        grep -A 20 \"## 测试套件执行状态\" \"${TEST_RESULTS_DIR}/${RESULT_PREFIX}_test_report.md\" | head -15\n    fi\n    echo \"===========================================\"\n    echo \"\"\n}\n\n# 帮助信息\nshow_help() {\n    echo \"JobView 数据库优化测试套件\"\n    echo \"\"\n    echo \"用法: $0 [OPTIONS] [TEST_TYPE]\"\n    echo \"\"\n    echo \"测试类型:\"\n    echo \"  unit        - 只运行单元测试\"\n    echo \"  integration - 只运行集成测试\"\n    echo \"  benchmark   - 只运行性能基准测试\"\n    echo \"  load        - 只运行负载测试\"\n    echo \"  regression  - 只运行回归测试\"\n    echo \"  quick       - 运行快速测试（单元测试+基准测试）\"\n    echo \"  all         - 运行所有测试（默认）\"\n    echo \"\"\n    echo \"环境变量:\"\n    echo \"  TEST_DB_HOST     - 测试数据库主机（默认: localhost）\"\n    echo \"  TEST_DB_PORT     - 测试数据库端口（默认: 5432）\"\n    echo \"  TEST_DB_USER     - 测试数据库用户（默认: test_user）\"\n    echo \"  TEST_DB_PASSWORD - 测试数据库密码（默认: test_pass）\"\n    echo \"  TEST_DB_NAME     - 测试数据库名称（默认: jobview_test）\"\n    echo \"\"\n    echo \"示例:\"\n    echo \"  $0                    # 运行所有测试\"\n    echo \"  $0 quick              # 运行快速测试\"\n    echo \"  $0 benchmark          # 只运行性能测试\"\n    echo \"  TEST_DB_HOST=db.test.com $0  # 使用自定义数据库\"\n    echo \"\"\n}\n\n# 检查命令行参数\nif [ \"$1\" = \"-h\" ] || [ \"$1\" = \"--help\" ]; then\n    show_help\n    exit 0\nfi\n\n# 执行主函数\nmain \"$@\"